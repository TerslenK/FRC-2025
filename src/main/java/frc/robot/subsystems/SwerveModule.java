// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.SwerveModulePosition;
import edu.wpi.first.math.kinematics.SwerveModuleState;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import frc.robot.mainsystems.Drivetrain;

public class SwerveModule {
  private static final double WHEEL_RADIUS = 0.0508; // Tekerleƒüin in√ß deƒüeri (1/16)
  private static final int ENCODER_RESOLUTION = 4096;

  private static final double MODULE_MAX_ANGULAR_VELOCITY = Drivetrain.MAX_ANGULAR_SPEED;
  private static final double MODULE_MAX_ANGULAR_ACCELERATION =
      2 * Math.PI; // RPP(Saniye Ba≈üƒ± Radyan) √ºss√º 2

  private final PWMSparkMax driveMotor;
  private final PWMSparkMax turningMotor;

  private final Encoder driveEncoder;
  private final Encoder turningEncoder;

  // TODO Robota g√∂re modifiye et
  private final PIDController drivePIDController = new PIDController(1, 0, 0);

  // TODO Robota g√∂re modifiye et
  private final ProfiledPIDController turningPIDController =
      new ProfiledPIDController(
          1,
          0,
          0,
          new TrapezoidProfile.Constraints(
                  MODULE_MAX_ANGULAR_VELOCITY, MODULE_MAX_ANGULAR_ACCELERATION));

  // TODO Robota g√∂re modifiye et
  private final SimpleMotorFeedforward driveFeedforward = new SimpleMotorFeedforward(1, 3);
  private final SimpleMotorFeedforward turnFeedforward = new SimpleMotorFeedforward(1, 0.5);

  /**
   * Hareket motoru, d√∂nme motoru ve bunlarƒ±n encoderi ile yeni bir swerve mod√ºl√º olu≈ütur.
   *
   * @param driveMotorChannel S√ºr√º≈ü motorunun PWM portu.
   * @param turningMotorChannel D√∂nme motorunun PWM portu.
   * @param driveEncoderChannelA "A" Kanalƒ±ndaki s√ºr√º≈ü encoderi i√ßin DIO giri≈üi.
   * @param driveEncoderChannelB "B" Kanalƒ±ndaki s√ºr√º≈ü encoderi i√ßin DIO giri≈üi.
   * @param turningEncoderChannelA "A" Kanalƒ±ndaki d√∂n√º≈ü encoderi i√ßin DIO giri≈üi.
   * @param turningEncoderChannelB "B" Kanalƒ±ndaki d√∂n√º≈ü encoderi i√ßin DIO giri≈üi.
   */
  public SwerveModule(
      int driveMotorChannel,
      int turningMotorChannel,
      int driveEncoderChannelA,
      int driveEncoderChannelB,
      int turningEncoderChannelA,
      int turningEncoderChannelB) {
    driveMotor = new PWMSparkMax(driveMotorChannel);
    turningMotor = new PWMSparkMax(turningMotorChannel);

    driveEncoder = new Encoder(driveEncoderChannelA, driveEncoderChannelB);
    turningEncoder = new Encoder(turningEncoderChannelA, turningEncoderChannelB);

    // S√ºr√º≈ü encoderinin DPS'ini ayarla.
    // 1 tekerlek d√∂n√º≈ü√ºn√º encoderin √ß√∂z√ºn√ºrl√ºƒü√ºne
    // b√∂lerek elde ediyoruz.
    driveEncoder.setDistancePerPulse(2 * Math.PI * WHEEL_RADIUS / ENCODER_RESOLUTION);

    // D√∂n√º≈ü encoderi i√ßin RPP(Sinyal Ba≈üƒ± Radyan) ile mesafe(a√ßƒ±) √ßek.
    // Bunuda tam d√∂nme(2*pi)yi encoder √ß√∂z√ºn√ºrl√ºƒü√ºne b√∂lerek bul.
    turningEncoder.setDistancePerPulse(2 * Math.PI / ENCODER_RESOLUTION);

    // PID Kontrolc√ºs√ºn√ºn deƒüerini "-pi" ile "pi" arasƒ±nda sƒ±nƒ±rlandƒ±rƒ±p s√ºrekli olmasƒ±nƒ± saƒüla
    turningPIDController.enableContinuousInput(-Math.PI, Math.PI);
  }

  /**
   * Mod√ºl√ºn ≈üuanki durumunu s√∂yle.
   *
   * @return mod√ºl√ºn ≈üuanki durumu.
   */
  public SwerveModuleState getState() {
    return new SwerveModuleState(
        driveEncoder.getRate(), new Rotation2d(turningEncoder.getDistance()));
  }

  /**
   * Mod√ºl√ºn ≈üuanki konumunu s√∂yle.
   *
   * @return mod√ºl√ºn ≈üuanki konumu.
   */
  public SwerveModulePosition getPosition() {
    return new SwerveModulePosition(
        driveEncoder.getDistance(), new Rotation2d(turningEncoder.getDistance()));
  }

  /**
   * Mod√ºl√ºn ne duruma gelmesini s√∂yle.
   *
   * @param desiredState istenilen hƒ±z ve rotasyonu olan durum.
   */
  public void setDesiredState(SwerveModuleState desiredState) {
    var encoderRotation = new Rotation2d(turningEncoder.getDistance());

    // ƒ∞stenilen durumun motoru 90 dereceden fazla d√∂nd√ºrmesini engelle
    SwerveModuleState state = SwerveModuleState.optimize(desiredState, encoderRotation);

    // Daha kayganüòè bir s√ºr√º≈ü i√ßin hƒ±zƒ± hata payƒ±nƒ±n kosin√ºs√º olarak al.
    // Bu sayede vekt√∂r√º √ßapraz almak yerine d√ºz bi ≈üekilde elde et
    state.speedMetersPerSecond *= state.angle.minus(encoderRotation).getCos();

    // S√ºr√º≈ü PID Kontrolc√ºs√ºndeki √ßƒ±ktƒ±yƒ± hesapla
    final double driveOutput =
        drivePIDController.calculate(driveEncoder.getRate(), state.speedMetersPerSecond);

    final double driveFeedforward = this.driveFeedforward.calculate(state.speedMetersPerSecond);

    // D√∂n√º≈ü PID Kontrolc√ºs√ºndeki √ßƒ±ktƒ±yƒ± hesapla
    final double turnOutput =
        turningPIDController.calculate(turningEncoder.getDistance(), state.angle.getRadians());

    final double turnFeedforward =
        this.turnFeedforward.calculate(turningPIDController.getSetpoint().velocity);

    driveMotor.setVoltage(driveOutput + driveFeedforward);
    turningMotor.setVoltage(turnOutput + turnFeedforward);
  }
}
